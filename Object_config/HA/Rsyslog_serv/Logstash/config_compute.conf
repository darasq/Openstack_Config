input {
    file {
	type => "syslog_openstack"
        path => [ "/var/log/controller1/nova.log" ]
    }
}
input {
    file {
	type => "syslog_openstack"
        path => [ "/var/log/controller1/cinder.log" ]
    }
}
input {
    file {
	type => "syslog_haproxy"
        path => [ "/var/log/controller1/haproxy_status.log" ]
    }
}


filter {
  if [type] == "syslog_openstack" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{WORD:level} %{SYSLOGPROG:syslog_program}?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{syslog_timestamp}" ]
      add_field => [ "received_from", "%{syslog_hostname}" ]
    }
    syslog_pri { }
    if !("_grokparsefailure" in [type]) {
      mutate {
        replace => [ "@timestamp", "%{syslog_timestamp}" ]
        replace => [ "@source_host", "%{syslog_hostname}" ]
        replace => [ "@message", "%{syslog_message}" ]
      }
    }
    mutate {
      remove_field => [ "syslog_hostname", "syslog_message", "syslog_timestamp" ]
    }
  }

if [type] == "syslog_haproxy" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{SYSLOGPROG:syslog_program}?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{syslog_timestamp}" ]
      add_field => [ "received_from", "%{syslog_hostname}" ]
    }
    syslog_pri { }
    if !("_grokparsefailure" in [type]) {
      mutate {
	replace => [ "@timestamp", "%{syslog_timestamp}" ]
        replace => [ "@source_host", "%{syslog_hostname}" ]
        replace => [ "@message", "%{syslog_message}" ]
      }
    }
    mutate {
      remove_field => [ "syslog_hostname", "syslog_message", "syslog_timestamp" ]
    }
  }
}


output {
#    file {
#        type => "mutated"
#        path => "/var/log/sortie.log"
#        flush_interval => 0
#	message_format =>
#        message_format => "CN: %{givenname} %{sn}  (%{@timestamp})"
#    }
stdout {
    debug => true
  }
}


